For building a custom sheet metal manufacturing configurator using APIs and without relying on GUIs of existing CAD software, here's a recommended workflow with suggested tools for each step:

### 1. **DXF File Preprocessing:**
   - **Software/Library:** 
     - **Python DXF Libraries:** Use libraries like `ezdxf` or `DXFGrabber` to read and preprocess DXF files.
     - **API:** Both `ezdxf` and `DXFGrabber` provide Python APIs to extract geometry, lines, and hole data from the DXF file.
   - **Purpose:** 
     - Detect folding lines (lines that represent bending edges).
     - Identify the number of holes by analyzing circles or arcs in the DXF file.

### 2. **3D Visualization:**
   - **Software/Library:** 
     - **Three.js:** For rendering the sheet metal in a web environment. You can use Three.js to visualize the extruded sheet metal in 3D.
     - **API:** Three.js provides JavaScript APIs for creating and manipulating 3D models, including extrusion and visualizing edges.
   - **Purpose:** 
     - Convert the DXF 2D geometry to a 3D extrusion using mesh generation techniques.
     - Render the sheet metal model with clear representation of folding lines and holes.

### 3. **Folding Line Detection & Bending Animation:**
   - **Software/Library:**
     - **OpenCascade (OCC):** This is a powerful open-source geometry kernel that can handle 3D geometry, including sheet metal folding. It supports APIs in Python and C++.
     - **Alternative: pyOCCT (Python bindings for OpenCascade):** If you prefer working with Python, this offers Python bindings for OpenCascade.
   - **API:** OpenCascade APIs allow you to manipulate geometric shapes, simulate folding, and calculate bending angles.
   - **Purpose:** 
     - Detect folding lines based on the sheet metal layout.
     - Animate the bending process by simulating the motion of bending along the folding lines.

### 4. **Hole Detection & Stud Placement:**
   - **Software/Library:**
     - **Three.js** (continued use for hole detection and stud placement visualization).
     - **OCC/pyOCCT:** For precise hole recognition and aligning studs to the holes, OpenCascade provides geometric manipulation tools.
   - **API:** Use OCC APIs for geometric operations like detecting hole locations and modifying the 3D model by inserting studs.
   - **Purpose:** 
     - Detect holes and their positions.
     - Place studs into the detected holes programmatically.

### 5. **Sheet Metal Extrusion Simulation:**
   - **Software/Library:**
     - **NumPy-STL:** If you are working with STL files and want to simulate extrusion as a preprocessing step, this Python library can help you convert geometry to mesh.
     - **Alternative:** You can also use **PyThreeJS**, the Python interface for Three.js, for more complex simulation.

### 6. **Web-based 3D Visualization & Interaction:**
   - **Software/Library:**
     - **Three.js (JavaScript):** Ideal for creating interactive, web-based 3D visualization and for controlling animations (like folding and stud insertion).
     - **Flask or FastAPI (Python back-end):** For building the backend, where you handle file uploads, preprocess DXF files, and communicate with the front-end.
   - **API:** Full control of the 3D visualization and interactivity using JavaScript and WebGL.

### Summary Workflow:
1. **Preprocessing:** Extract and process DXF using `ezdxf` or `DXFGrabber` to detect folding lines and holes.
2. **3D Extrusion & Visualization:** Use `Three.js` to visualize the sheet metal in 3D, handling extrusions and geometry manipulation.
3. **Bending Animation:** Use OpenCascade (with Python bindings, if preferred) to detect folding lines and simulate bending.
4. **Hole Detection & Stud Placement:** Use OpenCascade and `Three.js` to detect hole positions and place studs.
5. **Web Interface:** Use `Flask` or `FastAPI` to serve the preprocessed data and handle the web front-end for user interaction.

With this approach, you'll have complete control over the sheet metal workflow, from file import to visualization, folding animation, and assembly.